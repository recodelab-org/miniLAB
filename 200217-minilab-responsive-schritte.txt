Als kleine Hilfestellung, eine Dokumentation der Schritte um des minLAB Theme, Version a.1.1.2, grunsätzlich Responsive zu machen (Version a.1.1.3). Die Implentierung von JavaScript um des Burger Icon, bzw. die mobilnavigation, wirklich funktional zu machen, erfolgt in einem nächsten Schritt (Version a.1.1.4), den ich zeitnah auch noch vorbereite, zum Nachbauen.


1. 
MediaQueries im style.css anlegen (im Bereich 'RESPONSIVE DESIGN (MOBILE FIRST)') . 
Breakpoints: 600px, 768px, 1024px und 1280px.

/*-------------
RESPONSIVE DESIGN (MOBILE FIRST)
-------------*/

@media only screen and (min-width: 600px) {


}

@media only screen and (min-width: 768px) {


}

@media only screen and (min-width: 1024px) {


}

@media only screen and (min-width: 1280px) {


}

------------------------------------------


2. 
Viewport Meta Tag im <head> in der index.php einfügen um die korrekte Skalierung auf Mobile Devices zu gewährleisten.

<meta name="viewport" content="width=device-width, initial-scale=1">

------------------------------------------


3. 
Vor allem layout relevante CSS Strukturen im style.css, die oberhalb der MediaQueries liegen so anpassen, dass das Layout in schmaler Darstellung (einfach Browserfenster so schmal wie möglich ziehen), bzw. (wichtiger) in der Mobile Device Vorschau der Developer Tools (also auf 'Untersuchen' klicken, etc.) gut aussieht.

Z.B. Beitragbilder in Vorschau auf Startseite wieder 100% breit machen. Schriftgröße für Mobildarstellung anpassen, etc.

------------------------------------------


4. 
Im Zusammenhang mit Schritt 3 waren ein paar Anpassungen in der Struktur sinnvoll/notwendig, sowie die Anpassung der im Inhaltsbereich (Tag <article>) verwendeten Klassen.

        <article>

            <section class="image my-featured-image">
                <?php echo the_post_thumbnail()?>
            </section>

            <section class="content my-article-content">
                <h3><a href="<?php echo esc_url( get_permalink() ); ?>" class="link"><?php the_title(); ?></a></h3>
                <?php the_content(); ?>
            </section>

        </article>
        
So wurden beispiesweise die Tags <span> und <header> durch neutrale, aber im Sinne der HTML5 Semantik genauso praktikable <section> Elemente ersetzt (dies ist ein Unterscheid zum multiLAB Theme, wo das Beitragbild in einem <figure> Tag sitzt -- semantisch ein klein wenig korrekter, zugegeben ...). 

Ausserdem hat die index.php nun eine nachvollziehbare Hauptstruktur:

<header>
<nav>
<main>
<footer>

------------------------------------------


5. 
Jetzt in den MediaQueries an geeigneter Stelle anfangen Anpassungen vorzunehmen. Da stellt sich natürlich die Farge ab welcher ViewPort/Device Breite. Für die Breite des Beitragsbildes im Beitragsüberblick würde ich sagen: ab dem 1024px Breakpoint sollte es nicht mehr 100% breit sein.

@media only screen and (min-width: 1024px) {

    .home section.my-featured-image {
        width: 50%;
    }
    
}
    
Bitte bechten, dass nicht das Beitragsbild selbst hier aug 50% gesetzt wird, sondern dessen Container, und dass die Skalierung nur für die Homepage vorgenoomen wird, durch Einsatz der sehr nütlichen Body Class 'home'. 

Analog wird für Bildschrim- bzw. Viewportbreiten ab 1280px das Bild noch einmal kleiner skaliert (hier: 33%).

Die Skalierung des Beitragsbilds ist nur ein Beispiel für die Anpassungen, die man mithilfe der MediaQueris an Layout und Größen (z.B. der Schrift) vornehmen kann. Da ist auch bei einfachen Themes eine Menge an Detailarbeit notwendig, aber das Prinzip ist hiermit schon einmal abgehandelt.

------------------------------------------


6.
In diesem Schritt bauen wir das 'Burger Icon' ein und stellen das CSS so ein, des alternativ Burger Icon und Hauptmenüleiste angezeigt werden, je nach Devicebreite.

Wir werden uns das Icon von Fontawesome holen, da dies am einfachsten ist. Dafür müssen wir das Fontawseome Stylesheet importieren (das war in Version a.1.1.2 auch schon der Fall):

@import url(https://use.fontawesome.com/releases/v5.6.3/css/all.css);



Dann holen wir uns den HTML Code für das richtige Icon bei fontawesome.com:

Dies ist die URL des Icons: https://fontawesome.com/icons/bars?style=solid
Dies ist der Code: <i class="fas fa-bars"></i>


Dann bauen wir diesen Code auf geeignete Art und Weise in unsere index.php ein, z.B. so, oberhalb der Hauptnavigation in ein eigenes <nav> Element. Jetzt spätestens wird es notwenig das Hauptnavigation <nav> Element mit einer Klasse zu versehen (und das neue Burger Icon Element natürlich auch):

    <nav class="burger-icon">
    <i class="fas fa-bars"></i>
    </nav>

    <nav class="main-nav">
        <?php wp_nav_menu( array( 'theme_location' => 'header-menu' ) ); ?>
    </nav>
    
    
    
Schliesslich fügen wir im Stylesheet die Strukturen ein, die den Toggle zwischen Burger Icon und Hauptmenü bewirken:

Im Reset Bereich:

    nav.main-nav {
        display: none;
    }
    
    
    
In der MediaQuery die zu dem Breakpoint gehört ab wo wir die Hauptnavigation sehen möchten und das Burger Icon nicht mehr:

    @media only screen and (min-width: 768px) {

        nav.main-nav {
            display: block;
        }

        nav.burger-icon {
            display: none;
        }

    }
    
    
    
==========================================
Soweit dieses kleine Tutorial. EInbau von JS kommt noch dazu in ähnlicher Form.

Enno Hyttrek
